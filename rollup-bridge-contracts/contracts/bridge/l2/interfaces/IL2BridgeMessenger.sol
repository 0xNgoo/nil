// SPDX-License-Identifier: MIT
pragma solidity 0.8.28;

import { IBridgeMessenger } from "../../interfaces/IBridgeMessenger.sol";

/// @title IL2BridgeMessenger
/// @notice Interface for the L2BridgeMessenger contract which handles cross-chain messaging between L1 and L2.
/// @dev This interface defines the functions and events for finalizing deposit messages, sending messages to L1, and initiating withdrawals
interface IL2BridgeMessenger is IBridgeMessenger {
  /*//////////////////////////////////////////////////////////////////////////
                             ERRORS
    //////////////////////////////////////////////////////////////////////////*/

  /*//////////////////////////////////////////////////////////////////////////
                             EVENTS
    //////////////////////////////////////////////////////////////////////////*/

  /*//////////////////////////////////////////////////////////////////////////
                             MESSAGE STRUCTS   
    //////////////////////////////////////////////////////////////////////////*/

  /// @notice Enum representing the type of deposit.
  enum DepositType {
    ERC20,
    WETH,
    ETH
  }

  /**
   * @notice Represents a deposit message.
   * @dev The fields used for `messageHash` generation are:
   * - sender
   * - target
   * - value
   * - nonce
   * - gasLimit
   * - message
   */
  struct DepositMessage {
    address sender; // The address of the sender
    address target; // The target address on the destination chain
    uint256 value; // The value of the deposit
    uint256 nonce; // The nonce for the deposit
    uint256 gasLimit; // The gas limit for the deposit
    uint256 expiryTime; // The expiry time for the deposit
    bool isCancelled; // Indicates if the deposit is cancelled
    bool isClaimed; // Indicates if the failed deposit is claimed
    address refundAddress; // The address to refund if the deposit is cancelled
    DepositType depositType; // The type of the deposit
    bytes message; // The encoded message data generated by the bridge contract
  }

  /// @notice Gets the deposit type for a given message hash.
  /// @param msgHash The hash of the deposit message.
  /// @return depositType The type of the deposit.
  function getDepositType(bytes32 msgHash) external view returns (DepositType depositType);

  /// @notice Gets the deposit message for a given message hash.
  /// @param msgHash The hash of the deposit message.
  /// @return depositMessage The deposit message details.
  function getDepositMessage(bytes32 msgHash) external view returns (DepositMessage memory depositMessage);

  /// @notice Get the list of authorized bridges
  /// @return The list of authorized bridge addresses.
  function getAuthorizedBridges() external view returns (address[] memory);

  /*//////////////////////////////////////////////////////////////////////////
                           PUBLIC MUTATING FUNCTIONS
    //////////////////////////////////////////////////////////////////////////*/

  /*//////////////////////////////////////////////////////////////////////////
                           RESTRICTED FUNCTIONS
    //////////////////////////////////////////////////////////////////////////*/

  /// @notice Authorize a bridge addresses
  /// @param bridges The array of addresses of the bridges to authorize.
  function authorizeBridges(address[] memory bridges) external;

  /// @notice Authorize a bridge address
  /// @param bridge The address of the bridge to authorize.
  function authorizeBridge(address bridge) external;

  /// @notice Revoke authorization of a bridge address
  /// @param bridge The address of the bridge to revoke.
  function revokeBridgeAuthorization(address bridge) external;
}
